1.druid的加密：
	1.1:在测试类中，加密mysql数据库连接信息，得加密码,在db.properties中将password替换成得到的加密码;：
		@Test
		public void testName() throws Exception {
			String pwd = ConfigTools.encrypt("1229341617lq");
			System.out.println(pwd);
		}
	
	1.2:在applicationContext.xml中的druid配置中加入：
		<property name="filters" value="config"/>
		<property name="connectionProperties" value="config.decrypt=true" />,如下：
	
		<!-- 配置druid连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
							init-method="init" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="filters" value="config,stat"/>
			<property name="connectionProperties" value="config.decrypt=true" />
		</bean>

2.druid的监控：
	2.1:在web.xml中配置StatViewServlet，作用: 1):提供监控信息展示的html页面 	2):提供监控信息的JSON API
			<servlet>
		      	<servlet-name>DruidStatView</servlet-name>
		      	<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
		    </servlet>
		    <servlet-mapping>
		      	<servlet-name>DruidStatView</servlet-name>
		      	<url-pattern>/druid/*</url-pattern>
		    </servlet-mapping>
		注意，此时StrutsPrepareAndExecuteFilter的url-pattern需要将/*改成*.action,不然无法显示监控页面；
		
	2.2：在applicationContext.xml中的druid配置中加入stat过滤器：
			<property name="filters" value="config,stat"/>
	